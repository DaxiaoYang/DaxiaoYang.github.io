<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://DaxiaoYang.github.io</id>
    <title>Gridea</title>
    <updated>2021-09-11T14:29:38.343Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://DaxiaoYang.github.io"/>
    <link rel="self" href="https://DaxiaoYang.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://DaxiaoYang.github.io/images/avatar.png</logo>
    <icon>https://DaxiaoYang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Guava EventBus]]></title>
        <id>https://DaxiaoYang.github.io/post/guava-eventbus/</id>
        <link href="https://DaxiaoYang.github.io/post/guava-eventbus/">
        </link>
        <updated>2021-09-11T14:26:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="观察者模式">观察者模式</h2>
<p>概念：</p>
<blockquote>
<p>在对象之间定义一个一对多的依赖关系，</p>
<p>当一个对象（被观察者）的状态变化时，所有依赖的对象（观察者）都会自动收到通知</p>
</blockquote>
<p>使用场景：</p>
<blockquote>
<p>当一个事件发生时，会影响到很多其他模块的状态（考虑到模块可能会不断增多）</p>
</blockquote>
<p>观察者模式和生产-消费模型的区别：</p>
<ul>
<li>一对多和多对多</li>
<li>消息被多个对象消费和消息被一个对象消费</li>
</ul>
<p><strong>实现方式</strong></p>
<ul>
<li>传统方式实现观察者模式：
<ol>
<li>定义观察者接口</li>
<li>在被观察者中定义观察者接口的集合</li>
<li>当事件发生时 被观察者遍历集合 进行通知</li>
</ol>
</li>
</ul>
<p><strong>缺点</strong>：需要在被观察者中注册观察者</p>
<p>优化：</p>
<ul>
<li>通过一个中间映射表实现</li>
</ul>
<h2 id="guava-eventbus">Guava EventBus</h2>
<p>实现进程内部的发布订阅模型 避免显示注册观察者 进一步解耦</p>
<h3 id="流程图">流程图</h3>
<pre><code class="language-mermaid">graph TD
0(观察者所在的类将自身的观察者 即方法注册到EventBus中) --&gt; 1[EventBus构造事件到观察者的映射结构]
1 --&gt; 2[事件发生时通知EventBus EventBus通过映射结构找到所有对应的观察者 并执行]
</code></pre>
<h3 id="类图"><strong>类图</strong></h3>
<pre><code class="language-mermaid">classDiagram
	EventBus --* SubscriberRegistry
	EventBus --* Dispatcher
	EventBus --* Executor
	AsyncEventBus --|&gt; EventBus
	LegacyAsyncDispatcher --|&gt; Dispatcher
	ImmediateDispatcher --|&gt; Dispatcher
	PerThreadQueuedDispatcher --|&gt; Dispatcher
	DirectExecutor ..|&gt; Executor
	ThreadPoolExecutor ..|&gt; Executor
	EventBus --&gt; Subsriber
	Dispatcher --&gt; Subsriber
	SynchronizedSubscriber --|&gt; Subsriber
	class EventBus {
		-Executor executor
		-SubscriberRegistry subscribers
		-Dispatcher dispatcher
		-SubscriberExceptionHandler exceptionHandler
		+register(object) void
		+post(object) void
	}
	
	class SubscriberRegistry {
		~register(object) void
	}
	
	class Dispatcher {
		~dispatch(event, subsribers) void
	}
	
	class LegacyAsyncDispatcher {
	
	}
	
	class ImmediateDispatcher
	
	class PerThreadQueuedDispatcher
	
	class Executor {
		+execute(command) void
	}
	
	class DirectExecutor
	
	class ThreadPoolExecutor
	
	class AsyncEventBus
	
	class Subsriber {
		-EventBus bus
		~Object target
		-Method method
		-Executor executor
		~dispatchEvent(event) void
	}
	
	class SynchronizedSubscriber
</code></pre>
<p><strong>EventBus中成员变量各自的作用</strong></p>
<ul>
<li><code>SubscriberRegistry</code> : 核心组件 维护了事件到事件的所有订阅者方法的Map</li>
<li><code>Executor</code> ：用于定义如何调用订阅者方法</li>
<li><code>Dispatcher</code>： 控制事件分发到订阅者方法的次序</li>
<li><code>SubscriberExceptionHandler</code> : 执行订阅者方法出错时执行的逻辑</li>
</ul>
<h3 id="eventbus对象创建"><strong>EventBus对象创建</strong></h3>
<p>两种类型：</p>
<ul>
<li>
<p>同步</p>
<pre><code class="language-java">EventBus eventBus = new EventBus();
// 等价于
EventBus eventBus = new EventBus(
        // 默认标识符标识符 
  			&quot;default&quot;,
  			// 在发布事件的线程中调用观察者方法
        MoreExecutors.directExecutor(),
  			// 每个发布事件的线程都有自己独立的队列 依次从队列中取出事件和观察者 执行通知逻辑
        Dispatcher.perThreadDispatchQueue(),
  			// 默认的异常处理：记录日志
        LoggingHandler.INSTANCE);
</code></pre>
</li>
<li>
<p>异步</p>
<pre><code class="language-java">EventBus eventBus = new AsyncEventBus(new ThreadPoolExecutor());
// 等价于
EventBus eventBus = new EventBus(
  &quot;default&quot;, 
  // 在线程池中的线程中调用观察者方法
  new ThreadPoolExecutor(), 
  // 所有发布事件的线程共享一个队列
  Dispatcher.legacyAsync(), 
  LoggingHandler.INSTANCE);)
</code></pre>
</li>
</ul>
<h3 id="注册观察者"><strong>注册观察者</strong></h3>
<p><em>订阅者是一个方法而非一个类</em></p>
<ol>
<li>
<p>定义一个<code>public</code>方法，单一入参，参数类型为想要接收的事件类型</p>
</li>
<li>
<p>方法上加上<code>@Subscribe</code>注解 触发方法时默认是同步的</p>
<p>（如果允许多个线程访问 如：无状态方法 还可以加上<code>@AllowConcurrentEvents</code>注解）</p>
</li>
<li>
<p>将方法所在的类 注册到EventBus中 <code>register(Object)</code></p>
</li>
</ol>
<pre><code class="language-java">public class Observer extends BaseObserver {

  	// 定义事件的观察者 事件类型即为所定义参数的类型
    @Subscribe
    @AllowConcurrentEvents
    public void onEvent(Integer event) {
        System.out.println(&quot;handle integer event:&quot; + event);
    }
    
}
// 将方法所在的类 注册到EventBus
eventBus.register(new Observer());

// 实际调用注册表 
void register(Object listener) {
  	// 获取映射：事件 -&gt; 事件对应的所有订阅者（Method对象） MultiMap中一个Key可以对应多个Value
    Multimap&lt;Class&lt;?&gt;, Subscriber&gt; listenerMethods = findAllSubscribers(listener);
		// 将映射将入到全局的Map中
    for (Entry&lt;Class&lt;?&gt;, Collection&lt;Subscriber&gt;&gt; entry : listenerMethods.asMap().entrySet()) {
      Class&lt;?&gt; eventType = entry.getKey();
      Collection&lt;Subscriber&gt; eventMethodsInListener = entry.getValue();
      CopyOnWriteArraySet&lt;Subscriber&gt; eventSubscribers = subscribers.get(eventType);
      if (eventSubscribers == null) {
        CopyOnWriteArraySet&lt;Subscriber&gt; newSet = new CopyOnWriteArraySet&lt;&gt;();
        eventSubscribers =
            MoreObjects.firstNonNull(subscribers.putIfAbsent(eventType, newSet), newSet);
      }
      eventSubscribers.addAll(eventMethodsInListener);
    }
  }

// 构建映射：事件 -&gt; 事件对应的所有订阅者（Method对象）
private Multimap&lt;Class&lt;?&gt;, Subscriber&gt; findAllSubscribers(Object listener) {
    Multimap&lt;Class&lt;?&gt;, Subscriber&gt; methodsInListener = HashMultimap.create();
    Class&lt;?&gt; clazz = listener.getClass();
  	// 注解扫描
    for (Method method : getAnnotatedMethods(clazz)) {
      Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();
      Class&lt;?&gt; eventType = parameterTypes[0];
      // 想想为什么需要把EventBus对象和订阅者所在的类对象也封装进去？
      // Subsriber负责调用方法 默认情况下可以保证在EventBus中调用该方法的线程安全
      methodsInListener.put(eventType, Subscriber.create(bus, listener, method));
    }
    return methodsInListener;
  }

// getAnnotatedMethods(clazz)实际执行逻辑
private static ImmutableList&lt;Method&gt; getAnnotatedMethodsNotCached(Class&lt;?&gt; clazz) {
  	// 获取该类所有的父类与接口类及其本身的Class对象
    Set&lt;? extends Class&lt;?&gt;&gt; supertypes = TypeToken.of(clazz).getTypes().rawTypes();
  	// 用于过滤重复的观察者：方法签名相同的
    Map&lt;MethodIdentifier, Method&gt; identifiers = Maps.newHashMap();
    for (Class&lt;?&gt; supertype : supertypes) {
      for (Method method : supertype.getDeclaredMethods()) {
        // 判断该方法是否存在@Subsribe注解
        if (method.isAnnotationPresent(Subscribe.class) &amp;&amp; !method.isSynthetic()) {
          Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();
          // ...省略参数校验：1.校验参数个数是否为一个 2.是否为对象类型
          MethodIdentifier ident = new MethodIdentifier(method);
          if (!identifiers.containsKey(ident)) {
            identifiers.put(ident, method);
          }
        }
      }
    }
  	// 返回所有观察者
    return ImmutableList.copyOf(identifiers.values());
  }

// 很重要的一个封装类：Subsriber的创建
static Subscriber create(EventBus bus, Object listener, Method method) {
  // 该方法上没有@AllowConcurrentEvents注解则默认创建同步的Subsriber 区别后面发布事件 调用方法时会说  
  return isDeclaredThreadSafe(method)
        ? new Subscriber(bus, listener, method)
        : new SynchronizedSubscriber(bus, listener, method);
  }

private static boolean isDeclaredThreadSafe(Method method) {
    return method.getAnnotation(AllowConcurrentEvents.class) != null;
  }
</code></pre>
<h3 id="发布事件-通知订阅者"><strong>发布事件 通知订阅者</strong></h3>
<ol>
<li>将事件对象放入EventBus的<code>post</code>方法中，EventBus会将该事件通知到所有注册的观察者中</li>
<li>事件必须是一个对象 会通知所有该对象及其能接受该对象的父类/接口</li>
<li>如果没有观察者注册接收这个事件，则会将这个事件包装成一个DeadEvent 通知DeadEvent的观察者</li>
</ol>
<pre><code class="language-java">// 发布者发布事件
for (int i = 0; i &lt; 3; i++) {
  eventBus.post(i);
}

public void post(Object event) {
  	// 获取该类及其所有父类的Class对象对应的订阅者
    Iterator&lt;Subscriber&gt; eventSubscribers = subscribers.getSubscribers(event);
  	// 如果存在订阅者 则通过分发器通知对应的订阅者事件发生
    if (eventSubscribers.hasNext()) {
      // 发布事件到所有的订阅者上
      dispatcher.dispatch(event, eventSubscribers);
    } else if (!(event instanceof DeadEvent)) {
      // 找不到对应的订阅者且自身不是DeadEvent类型（程序编写错误） 
      // 封装成DeadEvent对象再次发布 所以可以注册一个观察DeadEvent的订阅者 用于定位问题
      post(new DeadEvent(this, event));
    }
}


Iterator&lt;Subscriber&gt; getSubscribers(Object event) {
  	// 获取该类及其所有父类的Class对象
    ImmutableSet&lt;Class&lt;?&gt;&gt; eventTypes = flattenHierarchy(event.getClass());
    List&lt;Iterator&lt;Subscriber&gt;&gt; subscriberIterators =
        Lists.newArrayListWithCapacity(eventTypes.size());
    for (Class&lt;?&gt; eventType : eventTypes) {
      CopyOnWriteArraySet&lt;Subscriber&gt; eventSubscribers = subscribers.get(eventType);
      if (eventSubscribers != null) {
        // eager no-copy snapshot
        subscriberIterators.add(eventSubscribers.iterator());
      }
    }
    return Iterators.concat(subscriberIterators.iterator());
  }



// 同步EventBus中默认使用的分发方式
private static final class PerThreadQueuedDispatcher extends Dispatcher {

    /** 线程私有的队列：存储事件对象和对应的订阅者的封装类对象 */
    private final ThreadLocal&lt;Queue&lt;Event&gt;&gt; queue；

    /** 线程私有的标志 */
    private final ThreadLocal&lt;Boolean&gt; dispatching；

    @Override
    void dispatch(Object event, Iterator&lt;Subscriber&gt; subscribers) {
      // 获取发布者线程私有的队列
      Queue&lt;Event&gt; queueForThread = queue.get();
      queueForThread.offer(new Event(event, subscribers));
      if (!dispatching.get()) {
        dispatching.set(true);
        try {
          Event nextEvent;
          while ((nextEvent = queueForThread.poll()) != null) {
            while (nextEvent.subscribers.hasNext()) {
              // 调用Subsriber的dispatchEvent
              nextEvent.subscribers.next().dispatchEvent(nextEvent.event);
            }
          }
        } finally {
          dispatching.remove();
          queue.remove();
        }
      }
    }
  }

// 异步EventBus中默认使用的分发方式
private static final class LegacyAsyncDispatcher extends Dispatcher {

    /** Global event queue. */
    private final ConcurrentLinkedQueue&lt;EventWithSubscriber&gt; queue =
        Queues.newConcurrentLinkedQueue();

    @Override
    void dispatch(Object event, Iterator&lt;Subscriber&gt; subscribers) {
      // 加入全局队列
      while (subscribers.hasNext()) {
        queue.add(new EventWithSubscriber(event, subscribers.next()));
      }
			// 将全局队列中的method都触发完
      EventWithSubscriber e;
      while ((e = queue.poll()) != null) {
        e.subscriber.dispatchEvent(e.event);
      }
    }
 }

class Subscriber {

  /** The event bus this subscriber belongs to. */
  @Weak private EventBus bus;

  /** The object with the subscriber method. */
  @VisibleForTesting final Object target;

  /** Subscriber method. */
  private final Method method;

  /** Executor to use for dispatching events to this subscriber. */
  private final Executor executor;
  
  final void dispatchEvent(final Object event) {
    // 模板方法 将执行订阅者方法的逻辑封装成一个Runnable匿名子类对象 让Executor执行
    executor.execute(
      new Runnable() {
        @Override
        public void run() {
          try {
       			// 具体执行
            invokeSubscriberMethod(event);
          } catch (InvocationTargetException e) {
            // 执行中出现异常 则封装异常上下文 交给SubscriberExceptionHandler处理
            bus.handleSubscriberException(e.getCause(), context(event));
          }
        }
      });
  }
  
  
  void invokeSubscriberMethod(Object event) throws InvocationTargetException {
    try {
      // 反射调用
      method.invoke(target, checkNotNull(event));
    } catch (IllegalArgumentException e) {
      throw new Error(&quot;Method rejected target/argument: &quot; + event, e);
    } catch (IllegalAccessException e) {
      throw new Error(&quot;Method became inaccessible: &quot; + event, e);
    } catch (InvocationTargetException e) {
      if (e.getCause() instanceof Error) {
        throw (Error) e.getCause();
      }
      throw e;
    }
  }
  
  static final class SynchronizedSubscriber extends Subscriber {
		
    // 子类会给该方法加锁 保证一次只会有一个线程执行method.invoke
    @Override
    void invokeSubscriberMethod(Object event) throws InvocationTargetException {
      synchronized (this) {
        super.invokeSubscriberMethod(event);
      }
    }
  }
} 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tomcat线程池]]></title>
        <id>https://DaxiaoYang.github.io/post/tomcat-xian-cheng-chi/</id>
        <link href="https://DaxiaoYang.github.io/post/tomcat-xian-cheng-chi/">
        </link>
        <updated>2021-09-11T14:22:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="tomcat">Tomcat</h2>
<blockquote>
<p>Tomcat是一个Web容器</p>
</blockquote>
<p>一个Web容器的主要功能：</p>
<ul>
<li>处理Socket连接 负责网络字节流和<code>Request</code> <code>Response</code>对象之间的转化</li>
<li>管理Servlet的生命周期，通过Servlet处理<code>Request</code>请求</li>
</ul>
<p>Tomcat的两大组成部分：</p>
<ul>
<li>连接器 <em>Connector</em> （作为HTTP服务器）</li>
<li>容器 <em>Container</em> （作为Servlet容器）</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://static001.geekbang.org/resource/image/ee/d6/ee880033c5ae38125fa91fb3c4f8cad6.jpg" alt="" loading="lazy"></figure>
<h2 id="对象池">对象池</h2>
<p>应用场景；</p>
<p>某种对象数量多 自身占用空间多 创建和初始化耗时 但存在时间短</p>
<p>那么这些对象的频繁的创建 初始化 GC都会消耗大量的CPU和内存资源</p>
<p><strong>实现方法</strong>：</p>
<p>把一个对象用完之后将它保存起来，需要再用时再拿出来（清空之前的信息 如果有必要）</p>
<p>进行重复使用（空间换时间）</p>
<h2 id="jdk线程池">JDK线程池</h2>
<p><code>java.util.concurrent.ThreadPoolExecutor</code></p>
<pre><code class="language-java">public ThreadPoolExecutor(int corePoolSize,
                          int maximumPoolSize,
                          long keepAliveTime,
                          TimeUnit unit,
                          BlockingQueue&lt;Runnable&gt; workQueue,
                          ThreadFactory threadFactory,
                          RejectedExecutionHandler handler)
</code></pre>
<p><strong>构造参数</strong></p>
<ul>
<li>
<p>核心线程数：</p>
</li>
<li>
<p>最大线程数 = 核心线程数 + 临时线程数</p>
<blockquote>
<p>核心线程：创建后一直存活的线程数（除非<code>allowCoreThreadTimeOut</code>参数为true）</p>
<p>临时线程：当一定的时间内从工作队列中获取不到Runnable对象，该线程销毁</p>
<p>核心线程和临时线程的区别方式：从工作队列中拉取Runnable对象的方式不同（受当前线程数与核心线程数的影响）</p>
<pre><code class="language-java">// 尝试从工作了队列中获取任务 
// 在Worker类中的runWorker方法中的循环中被调用 
// 当该方法返回null时会退出循环 
private Runnable getTask() {
        boolean timedOut = false; // Did the last poll() time out?
        for (;;) {
            int c = ctl.get();
            int wc = workerCountOf(c);
            // Are workers subject to culling?
            boolean timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;
            if ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))
                &amp;&amp; (wc &gt; 1 || workQueue.isEmpty())) {
                if (compareAndDecrementWorkerCount(c))
                    return null;
                continue;
            }
            try {
              	// 核心线程和临时线程的区别就在这里
                Runnable r = timed ?
                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :
                    workQueue.take();
                if (r != null)
                    return r;
                timedOut = true;
            } catch (InterruptedException retry) {
                timedOut = false;
            }
        }
    }
</code></pre>
</blockquote>
</li>
<li>
<p>临时线程最大空闲时间</p>
<p>两个参数都是用于设定临时线程从工作队列中尝试获取Runnable对象的时间</p>
<p><code>workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS)</code></p>
</li>
<li>
<p>工作队列：阻塞队列</p>
</li>
<li>
<p>线程工厂</p>
</li>
<li>
<p>拒绝策略：回调函数</p>
</li>
</ul>
<p><strong>执行流程</strong></p>
<ol>
<li>
<p>前 corePoolSize 个任务时，来一个任务就创建一个新线程。</p>
</li>
<li>
<p>后面再来任务，就把任务添加到任务队列里让所有的线程去抢，如果<strong>加入队列失败</strong>就创建临时线程。</p>
<blockquote>
<p>这里加入队列失败的定义为队列已满</p>
</blockquote>
</li>
<li>
<p>如果当前线程数达到 maximumPoolSize，执行拒绝策略。</p>
</li>
</ol>
<pre><code class="language-java">// 向线程池中提交一个任务
public void execute(Runnable command) {
        if (command == null)
            throw new NullPointerException();
  			// 获取线程控制状态：int(32) = 3(状态位) + 29(线程数)
        int c = ctl.get();
  			// 当前线程数小于核心线程数：
        if (workerCountOf(c) &lt; corePoolSize) {
          	// 创建一个新的线程并在一个循环不断尝试获取任务并执行
          	// 任务来源：1.创建线程时赋予的 2.从工作队列中拉取的 
            if (addWorker(command, true))
                return;
            c = ctl.get();
        }
  			// 当前线程数以达到核心线程数：将任务放到工作队列中
        if (isRunning(c) &amp;&amp; workQueue.offer(command)) {
            int recheck = ctl.get();
            if (! isRunning(recheck) &amp;&amp; remove(command))
                reject(command);
            else if (workerCountOf(recheck) == 0)
                addWorker(null, false);
        }
  			// 放入工作队列失败（offer方法返回false）: 尝试创建一个临时线程执行它
        else if (!addWorker(command, false))
          	// 当前线程数已达到最大线程数：执行拒绝策略
            reject(command);
}

// 线程控制状态 初始int值为111加上29个0
AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));

int CAPACITY = (1 &lt;&lt; 29) - 1 // 也就是000加上29个1
  
// 获取线程池状态
private static int runStateOf(int c)     { return c &amp; ~CAPACITY; }

// 获取线程池的线程数量
private static int workerCountOf(int c)  { return c &amp; CAPACITY; }
</code></pre>
<pre><code class="language-java">// 创建一个新的线程 
private boolean addWorker(Runnable firstTask, boolean core) {
        retry:
        for (;;) {
            int c = ctl.get();
            for (;;) {
                int wc = workerCountOf(c);
              	// core为true则用核心线程数作为上限判断 为false则用最大线程数作为上限
                if (wc &gt;= CAPACITY ||
                    wc &gt;= (core ? corePoolSize : maximumPoolSize))
                    return false;
                if (compareAndIncrementWorkerCount(c))
                    break retry;
            }
        }
        boolean workerStarted = false;
        boolean workerAdded = false;
  			// Worker构造方法里面创建了线程 并将Worker作为Runnable传给该线程
  			// class Worker extends AbstractQueuedSynchronizer implements Runnable
        Worker w = new Worker(firstTask);
        final Thread t = w.thread;
        if (t != null) {
      		// 加锁保障线程HashSet&lt;Worker&gt; workers的线程安全
          final ReentrantLock mainLock = this.mainLock;
          mainLock.lock();
          try {
            workers.add(w);
            workerAdded = true;
          }
        } finally {
          mainLock.unlock();
        }
        if (workerAdded) {
          // t.start()会调用Thread的Runnable对象的run方法 即Worker对象的Run方法
          t.start();
          workerStarted = true;
        }
      }
      return workerStarted;
}

// Worker构造方法
Worker(Runnable firstTask) {
  setState(-1); // inhibit interrupts until runWorker
  this.firstTask = firstTask;
  // 将Worker作为Runnable传给该线程
  this.thread = getThreadFactory().newThread(this);
}

// Worker对象的Run方法会调用该方法
final void runWorker(Worker w) {
        Thread wt = Thread.currentThread();
  			// 任务来源1：创建Worker对象时赋予
        Runnable task = w.firstTask;
        w.firstTask = null;
  			boolean completedAbruptly = true;
        try {
          	// 循环中不断尝试获取任务并执行
          	// 任务来源2：从getTask()中获取
            while (task != null || (task = getTask()) != null) {
                try {
                  	task.run();
                } finally {
                    task = null;
                }
            }
            completedAbruptly = false;
        } finally {
          	// 退出循环后（即getTask()返回null）清除Worker对象
            processWorkerExit(w, completedAbruptly);
        }
}
</code></pre>
<h2 id="tomcat线程池">Tomcat线程池</h2>
<blockquote>
<p>在JDK线程池的基础上进行了一定的扩展</p>
</blockquote>
<p><strong>Tomcat线程池跟我们业务开发的关系</strong></p>
<figure data-type="image" tabindex="2"><img src="https://static001.geekbang.org/resource/image/30/cf/309cae2e132210489d327cf55b284dcf.jpg" alt="" loading="lazy"></figure>
<ol>
<li>Endpoint 接收到 Socket 连接后，生成一个 SocketProcessor 任务提交到线程池去处理</li>
<li>SocketProcessor 的 run 方法会调用 Processor 组件去解析应用层协议</li>
<li>Processor 通过解析生成 Request 对象后，会调用 Adapter 的 Service 方法</li>
<li>Adapter中会调用容器 最终会调用Servlet的Service方法（SpringMVC实现了Servlet接口）</li>
</ol>
<pre><code class="language-java">// 默认参数
// 定制的任务队列 TaskQueue extends LinkedBlockingQueue&lt;Runnable&gt;
taskqueue = new TaskQueue(Integer.MAX_VALUE);

// 定制的线程工厂 TaskThreadFactory implements ThreadFactory
TaskThreadFactory tf = new TaskThreadFactory(namePrefix,daemon,getThreadPriority());

// 定制的线程池 ThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor
executor = new ThreadPoolExecutor(25, 200, 60000, TimeUnit.MILLISECONDS,taskqueue, tf);
</code></pre>
<p>Tomcat线程池的执行流程：</p>
<ol>
<li>
<p>前 corePoolSize 个任务时，来一个任务就创建一个新线程。</p>
</li>
<li>
<p>再来任务的话，就把任务添加到任务队列里让所有的线程去抢，如果<strong>加入队列失败</strong>就创建临时线程。</p>
<blockquote>
<p>这里加入队列失败的定义: 即<code>workQueue.offer()</code>方法返回false的逻辑</p>
<ul>
<li>队列已满 <code>size == capacity</code></li>
<li>已提交但未完成的任务数 &gt; 当前线程数（也就是说有任务没有分配到线程进行执行 需要线程）</li>
</ul>
</blockquote>
</li>
<li>
<p>如果总线程数达到 maximumPoolSize，</p>
<p><strong>则一段时间后 继续尝试把任务添加到任务队列中去</strong></p>
<p><strong>如果一段时间后 任务队列还是满的，插入失败，执行拒绝策略</strong></p>
</li>
</ol>
<pre><code class="language-java">public class ThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor {
  
  // 已经提交但是还没有执行的任务数量
  private final AtomicInteger submittedCount = new AtomicInteger(0);
  
  public void execute(Runnable command, long timeout, TimeUnit unit) {
      submittedCount.incrementAndGet();
      try {
          //调用Java原生线程池的execute去执行任务
          super.execute(command);
      } catch (RejectedExecutionException rx) {
         // 工作队列已满且总线程数达到maximumPoolSize 默认的拒绝策略被执行(即抛出异常)
          if (super.getQueue() instanceof TaskQueue) {
              final TaskQueue queue = (TaskQueue)super.getQueue();
              try {
                  // 等待一段时间后 再把任务放到任务队列中去
                	// 因为可能在等待的这段时间中 任务队列有位置空了出来
                  if (!queue.force(command, timeout, unit)) {
                      submittedCount.decrementAndGet();
                      // 一段时间后 队列仍然是满的，插入失败，则执行拒绝策略。
                      throw new RejectedExecutionException(&quot;...&quot;);
                  }
              } 
          }
      }
}
</code></pre>
<pre><code class="language-java">public class TaskQueue extends LinkedBlockingQueue&lt;Runnable&gt; {
	
  private transient volatile ThreadPoolExecutor parent;
  
  
   @Override
  // 线程池调用offer方法时，当前线程数肯定已经大于核心线程数了
  // 接下来判断：是将任务放到工作队列中还是创建新的线程执行该任务
  public boolean offer(Runnable o) {

      //如果线程数已经到了最大值，不能创建新线程了，只能把任务添加到任务队列。
      if (parent.getPoolSize() == parent.getMaximumPoolSize()) 
          return super.offer(o);
          
      //执行到这里，表明当前线程数大于核心线程数，并且小于最大线程数。
      //表明是可以创建新线程的，那到底要不要创建呢？分两种情况：
      
      //1. 如果已提交的任务数小于当前线程数，表示还有空闲线程，无需创建新线程
      if (parent.getSubmittedCount()&lt;=(parent.getPoolSize())) 
          return super.offer(o);
          
      //2. 如果已提交的任务数大于当前线程数，线程不够用了，返回false去创建新线程
      if (parent.getPoolSize()&lt;parent.getMaximumPoolSize()) 
          return false;
          
      //默认情况下总是把任务添加到任务队列
      return super.offer(o);
  }
  
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://DaxiaoYang.github.io/post/hello-gridea/</id>
        <link href="https://DaxiaoYang.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>